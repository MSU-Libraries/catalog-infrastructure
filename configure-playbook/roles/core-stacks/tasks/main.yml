---

- name: Log into GitLab container registry
  community.docker.docker_login:
    registry_url: "{{ REGISTRY_URL }}"
    username: "{{ REGISTRY_USER }}"
    password: "{{ REGISTRY_ACCESS_TOKEN }}"
    reauthorize: true
  become: true
  become_user: deploy

- name: Ensure Docker core-stacks dir exists
  ansible.builtin.file:
    path: /home/deploy/core-stacks/
    state: directory
    mode: '0755'
    owner: deploy
    group: deploy

- name: Copy public network docker-compose
  ansible.builtin.copy:
    src: docker-compose.public.yml
    dest: /home/deploy/core-stacks/
    mode: '0644'
    owner: deploy
    group: deploy

- name: Copy swarm-cleanup docker-compose
  ansible.builtin.copy:
    src: docker-compose.swarm-cleanup.yml
    dest: /home/deploy/core-stacks/
    mode: '0644'
    owner: deploy
    group: deploy

- name: Copy traefik docker-compose
  ansible.builtin.copy:
    src: docker-compose.traefik.yml
    dest: /home/deploy/core-stacks/
    mode: '0644'
    owner: deploy
    group: deploy

- name: Copy badbots docker-compose
  ansible.builtin.copy:
    src: docker-compose.badbots.yml
    dest: /home/deploy/core-stacks/
    mode: '0644'
    owner: deploy
    group: deploy
  when:
  - BADBOTS_IMAGE is defined
  - BADBOTS_IMAGE != ''

- name: Run envsubst on badbots docker-compose
  ansible.builtin.shell:
    cmd: |
      export BADBOTS_IMAGE='{{ BADBOTS_IMAGE }}'
      envsubst < docker-compose.badbots.yml | sponge docker-compose.badbots.yml
      chown deploy:deploy docker-compose.badbots.yml
  args:
    chdir: /home/deploy/core-stacks/
  when:
  - BADBOTS_IMAGE is defined
  - BADBOTS_IMAGE != ''

- name: Run envsubst on traefik docker-compose
  ansible.builtin.shell:
    cmd: |
      export BASICAUTH_FOR_RESOURCES='{{ lookup('ansible.builtin.env', 'BASICAUTH_FOR_RESOURCES') }}'
      export DEPLOY_HOST_1='{{ lookup('ansible.builtin.env', 'DEPLOY_HOST_1') }}'
      export DEPLOY_HOST_2='{{ lookup('ansible.builtin.env', 'DEPLOY_HOST_2') }}'
      export DEPLOY_HOST_3='{{ lookup('ansible.builtin.env', 'DEPLOY_HOST_3') }}'
      export DOMAIN='{{ DOMAIN }}'
      export EMAIL='{{ EMAIL }}'
      export CAMPUS_IPS='{{ CAMPUS_IPS }}'
      envsubst < docker-compose.traefik.yml | sponge docker-compose.traefik.yml
      chown deploy:deploy docker-compose.traefik.yml
  args:
    chdir: /home/deploy/core-stacks/

- name: Insert AWS creds into traefik docker-compose
  ansible.builtin.shell:
    cmd: yq -i ".services.traefik.environment=$( yq . ./traefik-env.yml -o json )" ./core-stacks/docker-compose.traefik.yml
  args:
    chdir: /home/deploy/
    executable: /bin/bash

# related to https://github.com/mikefarah/yq/issues/1191
- name: Clean up empty lines from traefik docker-compose
  ansible.builtin.command:
    cmd: sed -i "/^$/d" docker-compose.traefik.yml
  args:
    chdir: /home/deploy/core-stacks/

- name: Deploy public network stack
  ansible.builtin.command:
    cmd: docker stack deploy --prune -c docker-compose.public.yml public
  args:
    chdir: /home/deploy/core-stacks/
  run_once: true
  become: true
  become_user: deploy

- name: Waiting to let public network deploy
  ansible.builtin.pause:
    seconds: 15

- name: Deploy swarm-cleanup stack
  ansible.builtin.command:
    cmd: docker stack deploy --prune -c docker-compose.swarm-cleanup.yml swarm-cleanup
  args:
    chdir: /home/deploy/core-stacks/
  run_once: true

- name: Deploy traefik stack
  ansible.builtin.command:
    cmd: docker stack deploy --prune -c docker-compose.traefik.yml traefik
  args:
    chdir: /home/deploy/core-stacks/
  run_once: true

- name: Deploy badbots stack
  ansible.builtin.command:
    cmd: pc-deploy --detach --prune  core-stacks badbots
  args:
    chdir: /home/deploy/core-stacks/
  run_once: true
  become: true
  become_user: deploy
  when:
  - BADBOTS_IMAGE is defined
  - BADBOTS_IMAGE != ''
