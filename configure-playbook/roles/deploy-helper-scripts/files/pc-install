#!/bin/bash

# shellcheck disable=SC2034

SCRIPT_DIR=$( dirname "$0" )
SCRIPT_NAME=$( basename "$0" )
# shellcheck disable=SC1091
source "${SCRIPT_DIR}/pc-common"

declare -g LOCAL_DIR="/mnt/shared/local"

init_log_level

run_help_symlink() {
    run_help "Copy files and make dirs with attributes."
}

help_examples_make_link() {
    echo "# Create /mnt/shared/local/devel-nathan/live and set group/owner to 1000"
    echo "./$SCRIPT_NAME devel-nathan -v -d -o 1000 -g 1000 -t /live"
}

parse_flags_source() {
    VAR_NAME=SOURCE
    FLAG_PATTERN="-s"
    HELP_TEXT="The source"
    VAR_DEFAULT=
    VAR_IS_BOOL=0
    format_flag_info
}

parse_flags_target() {
    VAR_NAME=TARGET
    FLAG_PATTERN="-t"
    HELP_TEXT="The target"
    VAR_DEFAULT=
    VAR_IS_BOOL=0
    format_flag_info
}

parse_flags_owner() {
    VAR_NAME=OWNER
    FLAG_PATTERN="-o"
    HELP_TEXT="Set owner for target"
    VAR_DEFAULT=
    VAR_IS_BOOL=0
    format_flag_info
}

parse_flags_group() {
    VAR_NAME=GROUP
    FLAG_PATTERN="-g"
    HELP_TEXT="Set group for target"
    VAR_DEFAULT=
    VAR_IS_BOOL=0
    format_flag_info
}

parse_flags_dir() {
    VAR_NAME=DIR
    FLAG_PATTERN="-d"
    HELP_TEXT="The target will be a directory to create"
    VAR_DEFAULT=0
    VAR_IS_BOOL=1
    format_flag_info
}

parse_flags_verbose() {
    VAR_NAME=VERBOSE
    FLAG_PATTERN="-v"
    HELP_TEXT="Dry run the command; print what would happen, but make no changes."
    VAR_DEFAULT=0
    VAR_IS_BOOL=1
    format_flag_info
}

parse_flags_dry_run() {
    VAR_NAME=DRY_RUN
    FLAG_PATTERN="-n|--dry-run"
    HELP_TEXT="Dry run the command; print what would happen, but make no changes."
    VAR_DEFAULT=0
    VAR_IS_BOOL=1
    format_flag_info
}

load_flags

# Capture all the common pleads for help
if [[ -z "$1" || $1 == "-h" || $1 == "--help" || $1 == "help" ]]; then
    run_help_symlink
    exit 0
fi

has_directory_traversal() {
    [[ $1 =~ (^|/)\.\.(/|$) ]]
}

validate_args() {
    if [[ -z ${ARG_STACK} ]]; then
        die "The stack name must be passed as an argument."
    fi
    if [[ -z ${ARG_SOURCE} && ${ARG_DIR} -ne 1 ]]; then
        die "Source path must be specified with -s flag."
    fi
    if [[ -z ${ARG_TARGET} ]]; then
        die "Target path must be specified with -t flag."
    fi
    ARG_SOURCE="${ARG_SOURCE##"${LINK_BASE}"}"
    ARG_TARGET="${ARG_TARGET##"${LINK_BASE}"}"
    if has_directory_traversal "${ARG_SOURCE}"; then
        die "Source path may not contain directory traversals."
    fi
    if has_directory_traversal "${ARG_TARGET}"; then
        die "Taret path may not contain directory traversals."
    fi
    if [[ $ARG_DRY_RUN -eq 1 ]]; then
        export LOG_LEVEL=$(( LOG_LEVEL < 2 ? 2 : LOG_LEVEL ))
        print_info "DRY RUN mode. No changes will occur."
    fi
}

main() {
    declare -g LINK_BASE="$LOCAL_DIR/$ARG_STACK"
    print_debug "Base path for symlink and target: $LINK_BASE"
    validate_args

    declare -a INST_ARGS
    if [[ -n $ARG_VERBOSE ]]; then
        INST_ARGS+=("-v")
    fi
    if [[ -n $ARG_OWNER ]]; then
        INST_ARGS+=("-o" "$ARG_OWNER")
    fi
    if [[ -n $ARG_GROUP ]]; then
        INST_ARGS+=("-g" "$ARG_GROUP")
    fi
    if [[ $ARG_DIR -eq 1 ]]; then
        INST_ARGS+=("-d" "${LINK_BASE}/${ARG_TARGET#/}")
    else
        INST_ARGS+=("${LINK_BASE}/${ARG_SOURCE#/}" "${LINK_BASE}/${ARG_TARGET#/}")
    fi

    print_info "Command: install" "${INST_ARGS[@]}"
    if [[ $ARG_DRY_RUN -eq 0 ]]; then
        install "${INST_ARGS[@]}"
    fi
}

# shellcheck disable=SC2046
parse_args $(split_flags "$@")

# Ensure user is root
if [[ $EUID -ne 0 ]]; then
    print_verbose "Running as sudo"
    exec sudo -H "$0" "$@"
fi

main
