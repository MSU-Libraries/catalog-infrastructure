---

- name: Check if user exists
  getent:
    database: passwd
    key: "{{ user_dict.name }}"
    fail_key: no
  when:
  - user_dict.name is defined

- name: Create/update user
  user:
    name: "{{ user_dict.name }}"
    comment: "{{ user_dict.comment }}"
    state: present
    shell: "{{ user_dict.shell | default('/bin/bash') }}"
    groups: "{{ user_dict.groups }}"
    append: yes
  register: created_user
  when:
  - user_dict.name is defined
  - user_dict.comment is defined

- name: Remove the blank password for the user
  command: "passwd -d {{ user_dict.name }}"
  when:
  - getent_passwd[user_dict.name] == None
  - created_user.changed
  - user_dict.pw_lock is not defined or user_dict.pw_lock == false

- name: Force change password
  command: "chage -d 0 {{ user_dict.name }}"
  when:
  - getent_passwd[user_dict.name] == None
  - created_user.changed
  - user_dict.pw_lock is not defined or user_dict.pw_lock == false

- name: Lock password
  user:
    name: "{{ user_dict.name }}"
    password_lock: yes
  when:
  - user_dict.pw_lock is defined
  - user_dict.pw_lock == true

- name: Add authorized keys
  ansible.posix.authorized_key:
    user: "{{ user_dict.name }}"
    state: present
    key: "{{ item }}"
  loop: "{{ user_dict.public_keys }}"
  when:
  - user_dict.name is defined
  - user_dict.comment is defined
  - user_dict.public_keys is defined


- name: Checking if .skel directory exists
  stat:
    path: "/home/{{ user_dict.name }}/.skel/"
  register: skel_check
  delegate_to: localhost
  run_once: true
  when:
    - user_dict is defined
    - user_dict.name is defined

- name: Copying .skel directory
  copy:
    src: "/home/{{ user_dict.name }}/.skel/"
    dest: "/home/{{ user_dict.name }}/"
    owner: "{{ user_dict.name }}"
    group: "{{ user_dict.name }}"
    mode: preserve
    force: "{{ user_dict.force_push }}"
  when:
    - skel_check.stat.exists
    - user_dict is defined
    - user_dict.name is defined

- name: Copying user files - ensure target directory exists
  file:
    path: "/home/{{ user_dict.name }}/{{ item|dirname }}"
    owner: "{{ user_dict.name }}"
    group: "{{ user_dict.name }}"
    state: directory
  with_items: "{{ user_dict.send_files }}"
  when:
    - user_dict is defined
    - user_dict.name is defined
    - user_dict.send_files is defined

- name: Copying user files - sending file
  copy:
    src: "/home/{{ user_dict.name }}/{{ item }}"
    dest: "/home/{{ user_dict.name }}/{{ item }}"
    owner: "{{ user_dict.name }}"
    group: "{{ user_dict.name }}"
    mode: preserve
    force: "{{ user_dict.force_push }}"
  with_items: "{{ user_dict.send_files }}"
  when:
    - user_dict is defined
    - user_dict.name is defined
    - user_dict.send_files is defined