---

- name: Check if user exists
  getent:
    database: passwd
    key: "{{ user_dict.name }}"
    fail_key: no
  when:
  - user_dict.name is defined

- name: Create/update user
  user:
    name: "{{ user_dict.name }}"
    comment: "{{ user_dict.comment }}"
    state: present
    shell: "{{ user_dict.shell | default('/bin/bash') }}"
    groups: "{{ user_dict.groups }}"
    append: yes
  register: created_user
  when:
  - user_dict.name is defined
  - user_dict.comment is defined

- name: Set correct ownership of home directory
  ansible.builtin.file:
    path: "/home/{{ user_dict.name }}"
    state: directory
    owner: "{{ user_dict.name }}"
    group: "{{ user_dict.name }}"
  when:
  - user_dict.name is defined

- name: Remove the blank password for the user
  command: "passwd -d {{ user_dict.name }}"
  when:
  - getent_passwd[user_dict.name] == None
  - created_user.changed
  - user_dict.pw_lock is not defined or user_dict.pw_lock == false

- name: Force change password
  command: "chage -d 0 {{ user_dict.name }}"
  when:
  - getent_passwd[user_dict.name] == None
  - created_user.changed
  - user_dict.pw_lock is not defined or user_dict.pw_lock == false

- name: Lock password
  user:
    name: "{{ user_dict.name }}"
    password_lock: yes
  when:
  - user_dict.pw_lock is defined
  - user_dict.pw_lock == true

- name: Add authorized keys
  ansible.posix.authorized_key:
    user: "{{ user_dict.name }}"
    state: present
    key: "{{ item }}"
  loop: "{{ user_dict.public_keys }}"
  when:
  - user_dict.name is defined
  - user_dict.comment is defined
  - user_dict.public_keys is defined

- name: Dotfiles through chezmoi
  become: true
  become_user: "{{ user_dict.name }}"
  command: "chezmoi init --apply {{ user_dict.chezmoi_repository }} --guess-repo-url=false"
  timeout: 30
  ignore_errors: true
  when:
  - user_dict.chezmoi_repository is defined

- name: Identify user home dir
  ansible.builtin.shell:
    cmd: "getent passwd {{ user_dict.name }}  | awk -F: '{ print $6 }'"
  register: userhome
  when:
  - user_dict.name is defined
  - user_dict.node_ssh_access is defined and user_dict.node_ssh_access == true

- name: User .ssh dir exists
  ansible.builtin.file:
    path: "{{ userhome.stdout }}/.ssh"
    state: directory
    owner: "{{ user_dict.name }}"
    group: "{{ user_dict.name }}"
    mode: '0700'
  when:
  - user_dict.name is defined
  - user_dict.node_ssh_access is defined and user_dict.node_ssh_access == true

- name: User SSH Key exists
  community.crypto.openssh_keypair:
    comment: "{{ user_dict.name }}@catalog"
    path: "{{ userhome.stdout }}/.ssh/id_ed25519"
    type: ed25519
    owner: "{{ user_dict.name }}"
    group: "{{ user_dict.name }}"
    mode: '0600'
  run_once: true
  when:
  - user_dict.name is defined
  - user_dict.node_ssh_access is defined and user_dict.node_ssh_access == true
  register: user_pair

- name: Read user SSH Key
  ansible.builtin.slurp:
    src: "{{ userhome.stdout }}/.ssh/id_ed25519"
  run_once: true
  when:
  - user_dict.name is defined
  - user_dict.node_ssh_access is defined and user_dict.node_ssh_access == true
  register: user_keyfile

- name: Sync user SSH Key across nodes
  ansible.builtin.copy:
    content: '{{ user_keyfile.content | b64decode }}'
    dest: "{{ userhome.stdout }}/.ssh/id_ed25519"
    owner: "{{ user_dict.name }}"
    group: "{{ user_dict.name }}"
    mode: '0600'
  when:
  - user_dict.name is defined
  - user_dict.node_ssh_access is defined and user_dict.node_ssh_access == true

- name: Permit user SSH Key from catalog nodes only
  ansible.posix.authorized_key:
    user: "{{ user_dict.name }}"
    state: present
    key: "{{ user_pair.public_key }}"
    key_options: "from=\"{{ ansible_play_hosts_all | map('extract', hostvars, ['ansible_facts', 'default_ipv4', 'address']) | join(',') }}\""
  when:
  - user_dict.name is defined
  - user_dict.node_ssh_access is defined and user_dict.node_ssh_access == true

- name: Lookup keyscans of hosts
  # This would be easier done with a lookup('pipe', ...) but ansible is incapable of dealing with that
  ansible.builtin.command:
    cmd: "ssh-keyscan -t ed25519 {{ item.split('.')[0] if '.' in item else item }}.internal"
  loop: "{{ ansible_play_hosts }}"
  when:
  - user_dict.name is defined
  - user_dict.node_ssh_access is defined and user_dict.node_ssh_access == true
  register: keyscans

- name: Add host fingerprints to user known_hosts
  ansible.builtin.known_hosts:
    name: "{{ item.cmd | last }}"
    key: "{{ item.stdout }}"
    path: "{{ userhome.stdout }}/.ssh/known_hosts"
    state: present
  loop: "{{ keyscans.results }}"
  when:
  - user_dict.name is defined
  - user_dict.node_ssh_access is defined and user_dict.node_ssh_access == true

- name: Lookup keyscans of short hostnames
  ansible.builtin.command:
    cmd: ssh-keyscan -t ed25519 {{ item.split('.')[0] if '.' in item else item }}
  loop: "{{ ansible_play_hosts }}"
  when:
  - user_dict.name is defined
  - user_dict.node_ssh_access is defined and user_dict.node_ssh_access == true
  register: keyscans2

- name: Add host short hostname fingerprints to known_hosts
  ansible.builtin.known_hosts:
    name: "{{ item.cmd | last }}"
    key: "{{ item.stdout }}"
    path: "{{ userhome.stdout }}/.ssh/known_hosts"
    state: present
  loop: "{{ keyscans2.results }}"
  when:
  - user_dict.name is defined
  - user_dict.node_ssh_access is defined and user_dict.node_ssh_access == true
